<?xml version="1.0" encoding="UTF-8"?>
<!--

       Copyright 2015-2023 the original author or authors.

       Licensed under the Apache License, Version 2.0 (the "License");
       you may not use this file except in compliance with the License.
       You may obtain a copy of the License at

          https://www.apache.org/licenses/LICENSE-2.0

       Unless required by applicable law or agreed to in writing, software
       distributed under the License is distributed on an "AS IS" BASIS,
       WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       See the License for the specific language governing permissions and
       limitations under the License.

-->
#set( $D = '$' )
#set( $N = '#if' )
<document xmlns="http://maven.apache.org/XDOC/2.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
          xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">
  <properties>
    <title>MyBatis FreeMarker</title>
    <author email="mybatis-dev@googlegroups.com">The MyBatis Team</author>
  </properties>

  <body>
    <section name="Introduction">
      <p>
      The mybatis-freemarker is a plugin that helps creating big dynamic SQL queries. You can use it selectively, to only queries that need if statmenets or foreach-loops, for example. But it is possible to use this syntax by default too.
      </p>
      <p>
        If you are not familiar with FreeMarker syntax, you can view
      </p>
      <ul>
        <li>
          <a href="http://freemarker.org/docs/ref.html">Template Language Reference</a>
        </li>
      </ul>
    </section>

    <section name="Install">
      <p>
        If you are using maven, you can add this:
      </p>
      <source><![CDATA[
<dependency>
    <groupId>org.mybatis.scripting</groupId>
    <artifactId>mybatis-freemarker</artifactId>
    <version>${project.version}</version>
</dependency>
]]></source>

      <p>If you are using gradle, you can use this snippet:</p>

      <source><![CDATA[
dependencies {
    compile("org.mybatis.scripting:mybatis-freemarker:${project.version}")
}]]></source>

    </section>

    <section name="Install from sources">
      <ul>
        <li>Checkout the source code</li>
        <li>Run <code>mvn install</code> to build and to automatically install it to your local maven repo</li>
        <li>Add maven dependency to your project
          <source><![CDATA[
<dependency>
  <groupId>org.mybatis.scripting</groupId>
  <artifactId>mybatis-freemarker</artifactId>
  <version>${project.version}</version>
</dependency>]]></source>
        </li>
      </ul>
    </section>

    <section name="Configuration">
      <subsection name="Common">
        <p>
          By default, the <code>mybatis-freemarker.properties</code> file create in your classpath.
        </p>
        <ul>
          <li>
            You can define the base directory to search FreeMarker templates.
            By default it is empty string, so you will need to provide full path to template every time.
            <source><![CDATA[
# 'template-file.base-dir' (kebab-case) can be used too
templateFile.baseDir = sql
]]></source>

            The <code>basePackage</code> property supported for keeping backward compatibility with old versions(1.1.x or under).
            <source><![CDATA[
# 'base-package' (kebab-case) can be used too
basePackage = sql
]]></source>
          </li>
          <li>
            You can customize the path provider of SQL provider class that return the SQL template file path.
            For details see the <a href="#TemplateFilePathProvider">"TemplateFilePathProvider"</a>
            <source><![CDATA[
# templateFile.pathProvider.{name} = {value}
# 'template-file.path-provider' (kebab-case) can be used too
templateFile.pathProvider.cacheEnabled = false
]]></source>
          </li>
          <li>
            Since 1.2.0, you configure the FreeMarker configuration.
            About available setting name, please refer to <a href="https://freemarker.apache.org/docs/api/freemarker/template/Configuration.html#setSetting-java.lang.String-java.lang.String-">the API documentation of FreeMarker</a>.
            <source><![CDATA[
# freemarkerSettings.{name} = {value}
# 'freemarker-settings' (kebab-case) can be used too
freemarkerSettings.interpolation_syntax = dollar
]]></source>
          </li>
          <li>
            Since 1.2.0, you can use an any properties file or encoding as follow:
            <source><![CDATA[
$ java -Dmybatis-freemarker.config.file=mybatis-freemarker_production.properties -Dmybatis-freemarker.config.encoding=Windows-31J ...
]]></source>
          </li>
        </ul>

      </subsection>
      <subsection name="Scripting Language Driver">
        <p>
          You may need to do next steps:
        </p>
        <ul>
          <li>Register the language driver alias in your mybatis configuration file:
            <source><![CDATA[
<configuration>
  ...
  <typeAliases>
    <typeAlias alias="freemarker" type="org.mybatis.scripting.freemarker.FreeMarkerLanguageDriver"/>
  </typeAliases>
  ...
</configuration>]]></source>
          </li>
          <li>(Optional) Set the freemarker as your default scripting language:
            <source><![CDATA[
<configuration>
  ...
  <settings>
      <setting name="defaultScriptingLanguage" value="freemarker"/>
  </settings>
  ...
</configuration>]]></source>
          </li>
        </ul>
      </subsection>
    </section>

    <section name="Usage in annotations-driven mappers">
      <p>Just write your queries using FreeMarker syntax:</p>
      <source><![CDATA[
@Lang(FreeMarkerLanguageDriver.class)
@Select("select * from names where id in (${D}{ids?join(',')})")
List<Name> findNamesByIds(@Param("ids") List<Integer> ids);]]></source>
      <p>If any whitespace found inside <code>@Select</code> text, it is interpreted as inline script, not template name. It is convenient to avoid creating templates when script is really small. If you have a large SQL script, you can place it in distinct template and write next code:</p>
      <source><![CDATA[
@Lang(FreeMarkerLanguageDriver.class)
@Select("findName.ftl")
Name findName(@Param("n") String name);]]></source>
      <p>Template will be searched in classpath using <code>basePackage</code> property that has already been described above.</p>
      <p><code>findName.ftl</code> content can be:</p>
      <source><![CDATA[
SELECT *
FROM names
where firstName = <@p name="n"/>]]></source>
      <p><code><![CDATA[<@p name="n"/>]]></code> is a custom directive to generate <code>#{n}</code> markup.
        This markup further will be passed into MyBatis engine, and it will replace this to <code>?</code>-parameter.
        You can't write <code>#{paramName}</code> directly, because FreeMarker supports this syntax natively
        (alghough it is deprecated). So, to get <code>?</code>-parameters to prepared statements works, you need
        to use <code>${D}{r"#{paramName}"}</code> verbose syntax, or this directive. By the way, in XML
        files <code>${D}{r"#{paramName}"}</code> is more preferrable because you don't need wrap it using
        <code>CDATA</code> statements. In annotations and in external templates <code>&lt;@p/&gt;</code>
        directive is more neat.</p>
    </section>

    <section name="Usage in XML-driven mappers">
      <p>As in annotations, you can write inline scripts or template names.</p>
      <source><![CDATA[
<!-- This is handled by FreeMarker too, because it is included into select nodes AS IS -->
<sql id="cols">id, ${D}{r"firstName"}, lastName</sql>

<select id="findName" resultType="org.mybatis.scripting.freemarker.Name" lang="freemarker">
    findName.ftl
</select>

<select id="findNamesByIds" resultType="org.mybatis.scripting.freemarker.Name" lang="freemarker">
    select <include refid="cols"/> from names where id in (${D}{ids?join(',')})
</select>

<!-- It is not very convenient - to use CDATA blocks. Better is to create external template
    or use more verbose syntax: ${D}{r"#{id}"}. -->
<select id="find" resultType="org.mybatis.scripting.freemarker.Name" lang="freemarker">
    select * from names where id = <![CDATA[ <@p name='id'/>]]>]]&gt;<![CDATA[ and id = ${D}{id}
</select>]]></source>
    </section>

    <section name="Prepared statements parameters">
      <p><code>&lt;@p/&gt;</code> directive can be used in two scenarios:</p>
      <ul>
        <li>To pass parameters to prepared statements AS IS:
          <code>&lt;@p name='id'/&gt;</code> (will be translated to <code>#{id}</code>, and value already presents in parameter object)
        </li>
        <li>
          To pass any value as prepared statements parameter
          <code>&lt;@p value=someValue/&gt;</code> will be converted to <code>#{_p0}</code>, and
          <code>_p0</code> parameter will be automatically added to parameters map.
          It is convenient to use in loops like this:
          <source><![CDATA[
select * from names where firstName in (
    <#list ids as id>
        <@p value=id/>
        <${N} id_has_next>,</${N}>
    </#list>
)]]></source>
          This markup will be translated to
          <source>select * from names where firstName in (#{_p0}, #{_p1}, #{_p2})</source>
          and there are no need to care about escaping. All this stuff will be done automatically by JDBC driver.
          Unfortunately, you can't use this syntax if passing one object as parameter and without
          <code>@Param</code> annotation. The <code>UnsupportedOperationException</code> will be thrown.
          It is because appending additional parameters to some object in general is very hard.
          When you are using <code>@Param</code> annotated args, MyBatis will use <code>Map</code> to store parameters,
          and it is easy to add some generated params. So, if you want to use auto-generated prepared
          parameters, please don't forget about <code>@Param</code> annotation.
        </li>
      </ul>
    </section>

    <section name="TemplateFilePathProvider">

      <p>
        The <code>TemplateFilePathProvider</code> is SQL provider class that return the SQL template file path(Available since 1.2.0, and <b>this class required to use on MyBatis 3.5.1+</b>).
        This class use with SQL provider annotation(<code>@InsertProvider</code>, <code>@UpdateProvider</code>, <code>@DeleteProvider</code> and <code>@SelectProvider</code>) as follow:
      </p>

      <source><![CDATA[
package com.example.mapper;

public interface BaseMapper<T> {

  @Options(useGeneratedKeys = true, keyProperty = "id")
  @InsertProvider(type = TemplateFilePathProvider.class)
  void insert(T entity);

  @UpdateProvider(type = TemplateFilePathProvider.class)
  void update(T entity);

  @DeleteProvider(type = TemplateFilePathProvider.class)
  void delete(T entity);

  @SelectProvider(type = TemplateFilePathProvider.class)
  T findById(Integer id);

}
]]></source>

      <source><![CDATA[
package com.example.mapper;

public interface NameMapper extends BaseMapper {

  @SelectProvider(type = TemplateFilePathProvider.class)
  List<Name> findByCondition(NameCondition condition);

}
]]></source>

      <p>
        By default implementation, a template file path resolve following format and priority order.
        If does not match all, it throw an exception that indicate not found a template file.
      </p>
      <ul>
        <li>
          <code>com/example/mapper/NameMapper/NameMapper-{methodName}-{databaseId}.ftl</code>
        </li>
        <li>
          <code>com/example/mapper/NameMapper/NameMapper-{methodName}.ftl</code> (fallback using default database)
        </li>
        <li>
          <code>com/example/mapper/BaseMapper/BaseMapper-{methodName}-{databaseId}.ftl</code> (fallback using declaring class of mapper method)
        </li>
        <li>
          <code>com/example/mapper/BaseMapper/BaseMapper-{methodName}.ftl</code> (fallback using declaring class of mapper method and default database)
        </li>
      </ul>

      <p>
        If you want to customize the template file path format,
        you can customize using following configuration properties that start with <code>templateFile.pathProvider</code>.
      </p>

      <ul>
        <li>
          You can specify the prefix for adding to template file path. Default value is "".
          <source><![CDATA[
# 'template-file.path-provider.prefix' (kebab-case) can be used too
templateFile.pathProvider.prefix = mapper
]]></source>
        </li>
        <li>
          You can specify whether includes package path part. Default value is <code>true</code>(= includes package path).
          <source><![CDATA[
# 'template-file.path-provider.includes-package-path' (kebab-case) can be used too
templateFile.pathProvider.includesPackagePath = false
]]></source>
        </li>
        <li>
          You can specify whether separate directory per mapper. Default value is <code>true</code>(= separate directory per mapper).
          <source><![CDATA[
# 'template-file.path-provider.separate-directory-per-mapper' (kebab-case) can be used too
templateFile.pathProvider.separateDirectoryPerMapper = false
]]></source>
        </li>
        <li>
          You can specify whether includes mapper name into file name when separate directory per mapper. Default value is <code>true</code>(= includes mapper name).
          <source><![CDATA[
# 'template-file.path-provider.includes-mapper-name-when-separate-directory' (kebab-case) can be used too
templateFile.pathProvider.includesMapperNameWhenSeparateDirectory = false
]]></source>
        </li>
        <li>
          You can specify whether cache a resolved template file path. Default value is <code>true</code>(= cache a resolved template file path).
          <source><![CDATA[
# 'template-file.path-provider.cache-enabled' (kebab-case) can be used too
templateFile.pathProvider.cacheEnabled = false
]]></source>
        </li>
      </ul>

      <p>
        <span class="label important">TIPS</span><br/>
        Since the MyBatis 3.5.6, you can omit the type attribute at each annotations when specify the default provider class as global configuration as follow:<br/>
        Mapper interface:
        <source><![CDATA[
public interface NameMapper extends BaseMapper {
  @SelectProvider
  List<Name> findByCondition(NameCondition condition);
}
]]></source>
        Java based configuration:
        <source><![CDATA[
Configuration configuration = new Configuration();
configuration.setDefaultSqlProviderType(TemplateFilePathProvider.class);
]]></source>
        XML based configuration:
        <source><![CDATA[
<settings>
  <setting name="defaultSqlProviderType" value="org.mybatis.scripting.freemarker.support.TemplateFilePathProvider"/>
</settings>
]]></source>

      </p>

    </section>

    <section name="Examples">
      <p>You can view full-featured example of configuring and of both XML-mapper and annotations-driven mapper usage
        in <a href="https://github.com/mybatis/freemarker-scripting/tree/master/src/test">test suite</a></p>
    </section>
  </body>
</document>
